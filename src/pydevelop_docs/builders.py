"""Documentation builders for different project types."""

import shutil
import subprocess
from pathlib import Path
from typing import Any, Dict, List, Optional

import click
import tomlkit

from .config import get_haive_config


class BaseDocumentationBuilder:
    """Base class for documentation builders."""

    def __init__(self, project_path: Path, config: Dict[str, Any]):
        self.project_path = project_path
        self.config = config
        self.docs_path = project_path / "docs"

    def clean(self):
        """Clean build artifacts."""
        build_path = self.docs_path / "build"
        autoapi_path = self.docs_path / "source" / "autoapi"

        if build_path.exists():
            shutil.rmtree(build_path)
            click.echo(f"✅ Cleaned {build_path}")

        if autoapi_path.exists():
            shutil.rmtree(autoapi_path)
            click.echo(f"✅ Cleaned {autoapi_path}")

    def build(self, builder: str = "html", clean: bool = False, parallel: bool = True):
        """Build documentation."""
        if clean:
            self.clean()

        # Ensure build directory exists
        build_dir = self.docs_path / "build" / builder
        build_dir.mkdir(parents=True, exist_ok=True)

        # Build command
        cmd = [
            "sphinx-build",
            "-b",
            builder,
            "-W",
            "--keep-going",  # Warnings as errors but continue
        ]

        if parallel:
            cmd.extend(["-j", "auto"])  # Use all CPU cores

        cmd.extend([str(self.docs_path / "source"), str(build_dir)])

        # Run build
        click.echo(f"🔨 Building {self.config.get('name', 'documentation')}...")

        try:
            result = subprocess.run(
                cmd, cwd=self.project_path, capture_output=True, text=True
            )

            if result.returncode == 0:
                click.echo(f"✅ Build successful: {build_dir}")
                return True
            else:
                click.echo(f"❌ Build failed with errors:")
                click.echo(result.stderr)
                return False

        except Exception as e:
            click.echo(f"❌ Build error: {e}")
            return False


class SinglePackageBuilder(BaseDocumentationBuilder):
    """Builder for single package projects."""

    def prepare(self):
        """Prepare single package for building."""
        click.echo(f"📦 Preparing single package: {self.config['name']}")

        # Ensure conf.py uses our config
        conf_path = self.docs_path / "source" / "conf.py"
        if not conf_path.exists():
            self._generate_conf_py()

    def _generate_conf_py(self):
        """Generate conf.py for single package."""
        conf_content = f'''"""
Sphinx configuration for {self.config['name']}.
Generated by pydevelop-docs.
"""

import os
import sys

# Path setup
sys.path.insert(0, os.path.abspath("../.."))

# Import pydevelop-docs configuration
try:
    from pydevelop_docs.config import get_haive_config
    config = get_haive_config(
        package_name="{self.config['name']}",
        package_path="../..",
        is_central_hub=False
    )
    globals().update(config)
except ImportError:
    # Fallback to embedded configuration
    {self._get_embedded_config()}
'''

        conf_path = self.docs_path / "source" / "conf.py"
        conf_path.parent.mkdir(parents=True, exist_ok=True)
        conf_path.write_text(conf_content)

    def _get_embedded_config(self):
        """Get embedded configuration as fallback."""
        # This would include the full configuration
        # For now, return a minimal version
        return """
    project = "{}"
    extensions = ["sphinx.ext.autodoc", "sphinx.ext.napoleon"]
    html_theme = "furo"
""".format(
            self.config["name"]
        )


class MonorepoBuilder(BaseDocumentationBuilder):
    """Builder for monorepo projects."""

    def __init__(self, project_path: Path, config: Dict[str, Any]):
        super().__init__(project_path, config)
        self.packages = self._discover_packages()

    def _discover_packages(self) -> List[Path]:
        """Discover all packages in monorepo."""
        packages = []
        packages_dir = self.project_path / "packages"

        if packages_dir.exists():
            for pkg_dir in packages_dir.iterdir():
                if pkg_dir.is_dir() and not pkg_dir.name.startswith("."):
                    # Check if it has docs
                    if (pkg_dir / "docs").exists():
                        packages.append(pkg_dir)

        return packages

    def prepare(self):
        """Prepare all packages for building."""
        click.echo(f"📦 Found {len(self.packages)} packages to document")

        for package in self.packages:
            click.echo(f"   • {package.name}")

    def build_all(self, clean: bool = False, parallel: bool = True):
        """Build documentation for all packages."""
        results = []

        for package in self.packages:
            click.echo(f"\n📚 Building {package.name}...")

            # Create builder for each package
            pkg_config = {"name": package.name}
            builder = SinglePackageBuilder(package, pkg_config)

            # Prepare and build
            builder.prepare()
            success = builder.build(clean=clean, parallel=parallel)
            results.append((package.name, success))

        # Summary
        click.echo("\n📊 Build Summary:")
        for name, success in results:
            status = "✅" if success else "❌"
            click.echo(f"   {status} {name}")

        return all(success for _, success in results)

    def build_aggregate(self):
        """Build aggregate documentation using sphinx-collections."""
        click.echo("🔗 Building aggregate documentation...")

        # Create collections configuration
        collections_conf = self._generate_collections_conf()

        # Write to central docs
        central_docs = self.project_path / "docs"
        central_docs.mkdir(exist_ok=True)

        conf_path = central_docs / "source" / "conf.py"
        conf_path.parent.mkdir(parents=True, exist_ok=True)
        conf_path.write_text(collections_conf)

        # Build central docs
        central_builder = SinglePackageBuilder(
            self.project_path, {"name": "Haive Monorepo"}
        )
        return central_builder.build()

    def _generate_collections_conf(self):
        """Generate sphinx-collections configuration."""
        # This would generate proper collections config
        # For now, return a template
        return """
import os
from pydevelop_docs.config import get_haive_config

config = get_haive_config(
    package_name="Haive Documentation",
    package_path=".",
    is_central_hub=True
)

# Collections configuration
collections = {
    'packages': {
        'driver': 'copy_folder',
        'source': '../packages/*/docs/build/html',
        'target': 'packages',
    }
}

globals().update(config)
"""


class CustomConfigBuilder(BaseDocumentationBuilder):
    """Builder using custom configuration."""

    def __init__(self, project_path: Path, config_file: Path):
        # Load custom config
        if config_file.suffix == ".yaml":
            import yaml

            with open(config_file) as f:
                custom_config = yaml.safe_load(f)
        elif config_file.suffix == ".toml":
            with open(config_file) as f:
                custom_config = tomlkit.load(f)
        else:
            custom_config = {}

        super().__init__(project_path, custom_config)
        self.config_file = config_file

    def prepare(self):
        """Prepare using custom configuration."""
        click.echo(f"🔧 Using custom configuration: {self.config_file}")

        # Apply custom settings
        if "sphinx" in self.config:
            self._apply_sphinx_config(self.config["sphinx"])

    def _apply_sphinx_config(self, sphinx_config: Dict[str, Any]):
        """Apply custom Sphinx configuration."""
        conf_path = self.docs_path / "source" / "conf.py"

        # Generate conf.py with custom settings
        conf_content = f"""
# Custom configuration from {self.config_file}
import os
import sys

# Apply custom settings
{self._dict_to_python(sphinx_config)}
"""

        conf_path.write_text(conf_content)

    def _dict_to_python(self, d: Dict[str, Any]) -> str:
        """Convert dictionary to Python assignments."""
        lines = []
        for key, value in d.items():
            if isinstance(value, str):
                lines.append(f'{key} = "{value}"')
            elif isinstance(value, list):
                lines.append(f"{key} = {value}")
            else:
                lines.append(f"{key} = {repr(value)}")
        return "\n".join(lines)


def get_builder(
    project_path: Path, project_type: str = "auto", config_file: Optional[Path] = None
) -> BaseDocumentationBuilder:
    """Get appropriate builder for project type."""

    if config_file and config_file.exists():
        return CustomConfigBuilder(project_path, config_file)

    if project_type == "auto":
        # Auto-detect project type
        if (project_path / "packages").exists():
            project_type = "monorepo"
        else:
            project_type = "single"

    if project_type == "monorepo":
        return MonorepoBuilder(project_path, {"name": project_path.name})
    else:
        return SinglePackageBuilder(project_path, {"name": project_path.name})
