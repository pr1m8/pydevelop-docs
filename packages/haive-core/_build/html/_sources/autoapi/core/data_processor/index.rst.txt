core.data_processor
===================

.. py:module:: core.data_processor

.. autoapi-nested-parse::

   Core data processing functionality.





Module Contents
---------------

.. py:class:: ProcessingResult

   Result of a data processing operation.

   .. attribute:: status

      Processing status ('success', 'failed', 'partial')

   .. attribute:: data

      Processed data

   .. attribute:: metadata

      Additional processing metadata

   .. attribute:: error

      Error message if processing failed


   .. py:attribute:: status
      :type:  str


   .. py:attribute:: data
      :type:  Optional[Dict[str, Any]]
      :value: None



   .. py:attribute:: metadata
      :type:  Optional[Dict[str, Any]]
      :value: None



   .. py:attribute:: error
      :type:  Optional[str]
      :value: None



.. py:class:: DataProcessor(config: Optional[Dict[str, Any]] = None, validate: bool = True)

   Core data processor for the Haive ecosystem.

   This class provides the fundamental data processing capabilities
   that are used throughout the Haive ecosystem. It handles data
   validation, transformation, and error management.

   :param config: Configuration dictionary for the processor
   :param validate: Whether to validate input data (default: True)

   .. rubric:: Examples

   Basic usage:

   >>> processor = DataProcessor()
   >>> data = {"name": "test", "value": 42}
   >>> result = processor.process(data)
   >>> print(result.status)
   'success'

   With custom configuration:

   >>> config = {"strict_mode": True, "timeout": 30}
   >>> processor = DataProcessor(config=config)
   >>> result = processor.process(data)


   .. py:attribute:: config


   .. py:attribute:: validate
      :value: True



   .. py:method:: process(data: Dict[str, Any]) -> ProcessingResult

      Process input data and return results.

      :param data: Input data dictionary to process

      :returns: Contains status, processed data, and metadata
      :rtype: ProcessingResult

      :raises ProcessingError: If processing fails and strict_mode is enabled



   .. py:property:: stats
      :type: Dict[str, int]


      Get processing statistics.


   .. py:method:: reset_stats() -> None

      Reset processing statistics.



