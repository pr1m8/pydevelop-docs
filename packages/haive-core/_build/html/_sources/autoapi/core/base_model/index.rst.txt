core.base_model
===============

.. py:module:: core.base_model

.. autoapi-nested-parse::

   Base model classes for the Haive ecosystem.





Module Contents
---------------

.. py:class:: BaseModel(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Base model for all Haive entities.

   This class provides common functionality and fields that are used
   across all Haive models, ensuring consistency and shared behavior.

   .. attribute:: id

      Unique identifier for the entity

   .. attribute:: created_at

      Timestamp when the entity was created

   .. attribute:: updated_at

      Timestamp when the entity was last updated

   .. attribute:: metadata

      Additional metadata dictionary

   .. rubric:: Examples

   Creating a basic model:

   >>> from haive.core import BaseModel
   >>> model = BaseModel(id="test-123")
   >>> print(model.created_at)
   2025-01-01T00:00:00

   With custom metadata:

   >>> model = BaseModel(
   ...     id="test-456",
   ...     metadata={"source": "api", "version": "1.0"}
   ... )
   >>> print(model.metadata["source"])
   'api'


   .. py:attribute:: id
      :type:  str
      :value: None



   .. py:attribute:: created_at
      :type:  datetime.datetime
      :value: None



   .. py:attribute:: updated_at
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: metadata
      :type:  Dict[str, Any]
      :value: None



   .. py:class:: Config

      Pydantic configuration.


      .. py:attribute:: validate_assignment
         :value: True



      .. py:attribute:: use_enum_values
         :value: True



      .. py:attribute:: json_encoders



   .. py:method:: update_metadata(key: str, value: Any) -> None

      Update a metadata field and set updated_at timestamp.

      :param key: Metadata key to update
      :param value: New value for the metadata key



   .. py:method:: to_dict() -> Dict[str, Any]

      Convert model to dictionary representation.

      :returns: Dictionary representation of the model



