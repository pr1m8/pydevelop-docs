core.exceptions
===============

.. py:module:: core.exceptions

.. autoapi-nested-parse::

   Exception classes for the Haive ecosystem.





Module Contents
---------------

.. py:exception:: HaiveError(message: str, error_code: str = None, context: dict = None)

   Bases: :py:obj:`Exception`


   Base exception for all Haive-related errors.

   This is the root exception class for the Haive ecosystem.
   All other Haive exceptions should inherit from this class.

   .. attribute:: message

      Error message

   .. attribute:: error_code

      Optional error code for categorization

   .. attribute:: context

      Optional context dictionary with additional error details

   .. rubric:: Examples

   Basic usage:

   >>> raise HaiveError("Something went wrong")

   With error code and context:

   >>> raise HaiveError(
   ...     "Validation failed",
   ...     error_code="VALIDATION_ERROR",
   ...     context={"field": "email", "value": "invalid"}
   ... )


   .. py:attribute:: message


   .. py:attribute:: error_code
      :value: None



   .. py:attribute:: context


.. py:exception:: ProcessingError(message: str, error_code: str = None, context: dict = None)

   Bases: :py:obj:`HaiveError`


   Exception raised during data processing operations.

   This exception is raised when data processing fails in the
   DataProcessor or related components.

   .. rubric:: Examples

   >>> raise ProcessingError("Failed to process data")
   >>> raise ProcessingError(
   ...     "Invalid data format",
   ...     error_code="INVALID_FORMAT"
   ... )


.. py:exception:: ValidationError(message: str, error_code: str = None, context: dict = None)

   Bases: :py:obj:`HaiveError`


   Exception raised when data validation fails.

   This exception is raised when input validation fails,
   typically in model validation or API request validation.

   .. rubric:: Examples

   >>> raise ValidationError("Email format is invalid")
   >>> raise ValidationError(
   ...     "Required field missing",
   ...     context={"field": "name"}
   ... )


.. py:exception:: ConfigurationError(message: str, error_code: str = None, context: dict = None)

   Bases: :py:obj:`HaiveError`


   Exception raised when configuration is invalid or missing.

   This exception is raised when there are issues with
   system configuration, environment variables, or settings.

   .. rubric:: Examples

   >>> raise ConfigurationError("Database URL not configured")
   >>> raise ConfigurationError(
   ...     "Invalid timeout value",
   ...     context={"timeout": -1, "expected": "> 0"}
   ... )


