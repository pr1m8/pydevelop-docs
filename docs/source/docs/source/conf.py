# Generated Sphinx Configuration
# Auto-generated by PyAutoDoc ConfigLoader
# DO NOT EDIT MANUALLY - Edit YAML files instead

import os
import sys

from sphinx.application import Sphinx

# Path setup
sys.path.insert(0, os.path.abspath("../../src"))

# Project information
project = "pyautodoc"
author = "William R. Astley"
copyright = "2025, William R. Astley"
release = "0.1.0"

# Extensions - HYPER-ORGANIZED with proper loading order (compatibility filtered)
extensions = [
    # Core (Priority 1-10) - AutoAPI FIRST as requested
    "sphinx.ext.autodoc",
    "autoapi.extension",
    "sphinx.ext.napoleon",
    "sphinx.ext.viewcode",
    "sphinx.ext.intersphinx",
    "seed_intersphinx_mapping",  # Auto-populate intersphinx from pyproject.toml
    # Enhanced API (Priority 11-20) - REMOVED enum_tools due to compatibility
    "sphinxcontrib.autodoc_pydantic",
    "sphinx_autodoc_typehints",
    # Content & Design (Priority 21-30) - INTENSE FURO FOCUS
    "myst_parser",
    "sphinx_design",  # KEY for intense theming
    "sphinx_togglebutton",
    "sphinx_copybutton",
    "sphinx_tabs.tabs",
    # Execution (Priority 31-40) - TESTING FOCUS
    # "sphinx_exec_code",  # Will test if available
    "sphinxcontrib.programoutput",
    # "sphinx_runpython",  # Will test if available
    # Diagrams (Priority 41-50) - MERMAID FOCUS
    "sphinx.ext.graphviz",
    "sphinxcontrib.mermaid",
    "sphinxcontrib.plantuml",
    # Utilities (Priority 51-60)
    "sphinx_sitemap",
    "sphinx_codeautolink",  # Re-enabled - issue was fulltoc conflict, not docutils
    # TOC Enhancements (Priority 61-70)
    # "sphinxcontrib.fulltoc",  # Disabled - conflicts with sphinx-codeautolink
    # "sphinx_external_toc",  # Requires _toc.yml file
    "sphinx_treeview",  # Dynamic collapsible tree view sidebar - EXPERIMENTING
    # Enhanced Features (Priority 71-80)
    # "sphinx_paramlinks",  # Removed - codeautolink handles this + config issues
    "sphinx_toggleprompt",  # Toggle Python prompts in code blocks (INSTALLED)
    "sphinx_prompt",  # Better CLI prompt documentation (INSTALLED)
    "sphinx_last_updated_by_git",  # Last modification from git (INSTALLED)
    "sphinx_inlinecode",  # Enhanced inline code styling (TESTING - may need HTML post-processing)
    "sphinx_library",  # Better library documentation (INSTALLED)
    "sphinx_icontract",  # Document contracts (INSTALLED)
    "sphinx_tippy",  # Rich hover tooltips (INSTALLED)
    # "sphinx_apischema",   # Enhanced dataclass documentation - INCOMPATIBLE WITH AUTOAPI
    # Error: TypeError: None is not a module, class, method, or function
    # Occurs when AutoAPI passes None objects to process_docstring handler
    # Documentation Tools (Priority 81-90)
    "sphinx_comments",  # Add comments and annotations (INSTALLED)
    "sphinx_contributors",  # Contributors extension (INSTALLED)
    "sphinx_issues",  # Link to GitHub issues (INSTALLED)
    "sphinx_needs",  # Requirements tracking and traceability (INSTALLED)
    "sphinxarg.ext",  # Automatic CLI documentation (INSTALLED)
    "notfound.extension",  # Custom 404 page (INSTALLED)
    "sphinx_reredirects",  # Redirect management for moved pages (INSTALLED)
    "sphinxext.rediraffe",  # Broken link detection and redirect generation (INSTALLED)
    "sphinx_git",  # Git changelog integration (INSTALLED)
    "sphinx_comments",  # Comments and annotations (INSTALLED)
    # "sphinxcontrib.lastupdate", # Last updated timestamps - PACKAGE STRUCTURE ISSUE (using sphinx_last_updated_by_git instead)
    "sphinx_debuginfo",  # Development debug information (INSTALLED)
    "sphinxext.opengraph",  # OpenGraph metadata for social sharing (PROPER EXTENSION)
    "sphinx_tags",  # Content tagging system (INSTALLED)
    "sphinx_favicon",  # Favicon management (INSTALLED)
    "sphinxcontrib.collections",  # Document collections (FIXED RECURSIVE LOOPS)
    "sphinx_combine",  # Combine multiple documents (TESTING)
    # NOTE: Removing sphinx_reports - may have compatibility issues
]

# General configuration
templates_path = ["_templates", "_autoapi_templates"]
html_static_path = ["_static"]
exclude_patterns = [
    "_build",
    "Thumbs.db",
    ".DS_Store",
    "**/CVS",
    "**/.git",
    "_collections/*/_collections",  # Prevent nested collection directories
    "**/symlink_loops",  # Prevent symlink loop directories
]
add_module_names = False
toc_object_entries_show_parents = "hide"

# TOC Configuration - Enhanced nesting and presentation
html_sidebars = {
    "**": [
        "sidebar/brand.html",
        "sidebar/search.html",
        "sidebar/scroll-start.html",
        "sidebar/navigation.html",
        "sidebar/ethical-ads.html",
        "sidebar/scroll-end.html",
    ]
}

# Furo-specific TOC options
navigation_with_keys = True
top_of_page_button = "edit"

# Sphinx TOC settings
toctree_maxdepth = 4  # Maximum depth for nested TOC
toctree_collapse = False  # Don't collapse by default
toctree_titles_only = False  # Show full titles
toctree_includehidden = True  # Include hidden TOC entries

# Jinja2 options
jinja_env_options = {"extensions": ["jinja2.ext.do"]}

# AutoAPI configuration - PRIORITY FIRST
autoapi_type = "python"
autoapi_dirs = ["../../src"]
autoapi_template_dir = "_autoapi_templates"
autoapi_add_toctree_entry = True
autoapi_generate_api_docs = True
autoapi_keep_files = True
autoapi_options = [
    "members",
    "undoc-members",
    "show-inheritance",
    "show-module-summary",
    "private-members",
    "special-members",
    "imported-members",
]
autoapi_python_class_content = "both"
autoapi_add_class_diagram = True
autoapi_class_diagram_depth = 2

# AutoAPI TOC configuration
autoapi_member_order = "groupwise"  # Group by type
autoapi_root = "autoapi"  # Root directory for API docs
autoapi_toctree_depth = 3  # Depth for API TOC entries

# Napoleon configuration
napoleon_google_docstring = True
napoleon_numpy_docstring = True
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False

# Intersphinx configuration
# seed-intersphinx-mapping will auto-populate from pyproject.toml
pkg_requirements_source = "pyproject"  # Read dependencies from pyproject.toml
repository_root = "../.."  # Path to repo root from docs/source

# Manual intersphinx mappings (for packages without metadata or overrides)
intersphinx_mapping = {
    "python": ("https://docs.python.org/3", None),
    "pydantic": ("https://docs.pydantic.dev/latest", None),
    "sphinx": ("https://www.sphinx-doc.org/en/master", None),
    # seed-intersphinx-mapping will add more mappings automatically
}

# Pydantic configuration
autodoc_pydantic_model_show_json = True
autodoc_pydantic_model_show_config_summary = True
autodoc_pydantic_model_show_validator_summary = True
autodoc_pydantic_model_show_field_summary = True
autodoc_pydantic_model_show_validator_members = True
autodoc_pydantic_field_list_validators = True
autodoc_pydantic_field_show_constraints = True
autodoc_pydantic_model_erdantic_figure = False
autodoc_pydantic_model_erdantic_figure_collapsed = False

# Type hints configuration
typehints_fully_qualified = False
typehints_use_signature = True

# MyST Parser configuration
myst_enable_extensions = [
    "deflist",
    "tasklist",
    "html_image",
    "colon_fence",
    "smartquotes",
    "replacements",
    "linkify",
    "strikethrough",
    "attrs_inline",
    "attrs_block",
]
myst_heading_anchors = 3
myst_fence_as_directive = ["mermaid", "note", "warning"]

# Sphinx Design configuration - INTENSE THEMING
sd_fontawesome_latex = True

# Toggle button configuration
togglebutton_hint = "Click to expand"
togglebutton_hint_hide = "Click to collapse"

# Copy button configuration
copybutton_prompt_text = r">>> |\.\.\. |\$ |In \[\d*\]: | {2,5}\.\.\.: | {5,8}: "
copybutton_prompt_is_regexp = True
copybutton_remove_prompts = True

# Tabs configuration
sphinx_tabs_disable_tab_closing = True

# Execution extensions configuration (if loaded)
# exec_code_working_dir = "."
# exec_code_source_folders = ["../../src"]
programoutput_use_ansi = True
# runpython_show_source = True

# Mermaid configuration - CUSTOM THEMING
mermaid_params = [
    "--theme",
    "neutral",
    "--width",
    "800",
    "--backgroundColor",
    "transparent",
]
mermaid_verbose = True

# PlantUML configuration
plantuml_output_format = "svg"
plantuml = "plantuml"

# Sitemap configuration
html_baseurl = "https://pyautodoc.readthedocs.io/"

# Code autolink configuration - RESTORED with v0.17.5
codeautolink_autodoc_inject = True  # Re-enabled - fixed in newer version
codeautolink_concat_default = True

# Treeview configuration - Dynamic collapsible sidebar (EXPERIMENTING)
treeview_expand_all = False
treeview_collapse_inactive = True
treeview_max_depth = 4

# Toggle prompt configuration - Interactive code blocks
toggleprompt_offset_right = 30
toggleprompt_default_hidden = "true"

# API Schema configuration - Better dataclass documentation
apischema_show_json_schema = True
apischema_show_examples = True
apischema_group_by_type = True

# Removed paramlinks configuration - using codeautolink instead

# Type-safe configuration - Better type documentation
typesafe_show_annotations = True
typesafe_include_private = False

# Git last updated configuration - Page timestamps from git
git_last_updated_show_commit_hash = True
git_last_updated_format = "%Y-%m-%d %H:%M"

# Inline code configuration - Enhanced styling
inlinecode_highlight_language = "python"

# Library configuration - Better library docs
library_show_summary = True
library_group_by_type = True

# iContract configuration - Document contracts
icontract_include_repr = True
icontract_include_snapshot = False

# Comments configuration - Add annotations
comments_config = {
    "hypothesis": True,  # Enable hypothesis comments
    "utterances": False,  # Disable utterances for now
}

# Contributors configuration
contributors_show_contribution_counts = True
contributors_sort_by_contribution = True

# Issues configuration - Link to GitHub
issues_github_path = "yourusername/pyautodoc"
issues_uri = "https://github.com/yourusername/pyautodoc/issues/{issue}"

# Sphinx Tippy configuration - Rich hover tooltips
tippy_props = {
    "placement": "auto",
    "maxWidth": 600,
    "theme": "light-border",
    "delay": [200, 100],
    "duration": [200, 100],
    "interactive": True,
}
tippy_enable_mathjax = True
tippy_enable_doitips = True  # Enable DOI tooltips
tippy_rtd_urls = ["https://pyautodoc.readthedocs.io"]  # ReadTheDocs integration
tippy_anchor_parent_selector = "article.bd-article"  # For better positioning

# Sphinx APISchema configuration - Enhanced dataclass documentation
apischema_show_json_schema = True
apischema_show_examples = True
apischema_group_by_type = True
apischema_custom_css = True  # Use custom CSS styling

# Sphinx-prompt configuration - CLI documentation
prompt_modifiers = "auto"  # Auto-detect prompts
prompt_default_prompts = ["$", ">>>", "..."]

# Sphinx-needs configuration - Requirements tracking
needs_types = [
    {
        "directive": "req",
        "title": "Requirement",
        "prefix": "R_",
        "color": "#BFD8D2",
        "style": "node",
    },
    {
        "directive": "spec",
        "title": "Specification",
        "prefix": "S_",
        "color": "#FEDCD2",
        "style": "node",
    },
    {
        "directive": "test",
        "title": "Test Case",
        "prefix": "T_",
        "color": "#DF744A",
        "style": "node",
    },
]

needs_statuses = [
    {"name": "open", "description": "New requirement"},
    {"name": "in_progress", "description": "Being implemented"},
    {"name": "implemented", "description": "Completed"},
    {"name": "closed", "description": "Done and verified"},
]

needs_tags = [
    {"name": "security", "description": "Security related"},
    {"name": "performance", "description": "Performance critical"},
    {"name": "ui", "description": "User interface"},
]

# Sphinx-notfound-page configuration - Custom 404 page
notfound_context = {
    "title": "Page Not Found",
    "body": """
<h1>🚀 Oops! Page Not Found</h1>
<p>The page you're looking for seems to have wandered off into the documentation cosmos.</p>

<div class="admonition tip">
<p class="admonition-title">Try these options:</p>
<ul>
<li><strong>Search:</strong> Use the search box above to find what you need</li>
<li><strong>API Reference:</strong> Check our <a href="/autoapi/">complete API documentation</a></li>
<li><strong>CLI Guide:</strong> Looking for commands? See our <a href="/cli-guide/">CLI documentation</a></li>
<li><strong>Home:</strong> Return to the <a href="/">main documentation</a></li>
</ul>
</div>

<p>Still can't find what you're looking for? <a href="https://github.com/yourusername/pyautodoc/issues">Report an issue</a> and we'll help you out!</p>
    """,
}

notfound_template = "page.html"  # Use Furo's standard template
notfound_no_urls_prefix = True  # Don't add URL prefix to relative links

# Sphinx-reredirects configuration - Redirect management
redirects = {
    # Example redirects for moved/renamed pages
    # "old-page": "new-page.html",
    # "old-api": "autoapi/index.html",
    # "legacy/guide": "cli-guide.html",
}

# Rediraffe configuration - Broken link detection and redirect generation
rediraffe_redirects = {
    # Auto-generate redirects for common patterns
    # These will be checked during build and suggest redirects
}

# Enable redirect checking during build
rediraffe_branch = "main"  # Check redirects against this branch
rediraffe_auto_redirect_perc = 50  # Auto-redirect if 50%+ similarity

# Sphinx-git configuration - Git changelog integration
sphinx_git_changelog = True  # Enable git changelog
sphinx_git_changelog_title = "📝 Documentation Changes"
sphinx_git_show_tags = True  # Show git tags in changelog
sphinx_git_show_branch = True  # Show current branch

# Git integration settings
sphinx_git_tracked_files = ["docs/source/"]  # Track only docs files
sphinx_git_untracked = False  # Don't show untracked files

# Sphinx-apischema configuration - Enhanced dataclass documentation
apischema_type_annotations = True  # Show type annotations
apischema_class_summary = True  # Show class summaries
apischema_methods_summary = True  # Show method summaries

# Sphinx-inlinecode configuration - Enhanced inline code styling
inlinecode_enable = True  # Enable inline code enhancement
inlinecode_highlight_style = "default"  # Code highlighting style
inlinecode_process_docstrings = True  # Process docstrings for inline code

# Sphinx-lastupdate configuration - Page timestamps
lastupdated_fmt = "%Y-%m-%d %H:%M:%S"  # Custom timestamp format
lastupdated_timezone = "UTC"  # Use UTC timezone
lastupdated_show_commit_hash = True  # Show git commit hash if available

# Sphinx-debuginfo configuration - Development debug information
debuginfo_enable = True  # Enable debug information
debuginfo_show_performance = True  # Show build performance metrics
debuginfo_show_warnings = True  # Show warning counts
debuginfo_show_extensions = True  # Show loaded extensions

# OpenGraph configuration - Social sharing metadata (PROPER EXTENSION)
ogp_site_url = "https://pyautodoc.readthedocs.io/"
ogp_site_name = "PyAutoDoc"
ogp_site_description = "Hyper-organized documentation system with intense Furo theming"
ogp_image = "_static/social-preview.png"  # Default social image (if available)
ogp_image_alt = "PyAutoDoc Documentation"
ogp_type = "website"
ogp_locale = "en_US"

# OpenGraph social card generation (if using social cards feature)
ogp_social_cards = {
    "enable": True,
    "image": "_static/social-card-template.png",  # Template image for cards
    "line_color": "#2563eb",  # Brand color for social cards
    "text_color": "#ffffff",  # Text color for social cards
}

# Sphinx-tags configuration - Content tagging system
tags_create_tags = True  # Enable tag creation
tags_create_index = True  # Create a tags index page
tags_create_badges = True  # Create tag badges on pages
tags_page_title = "Documentation Tags"  # Title for tags index page
tags_intro_text = "Browse documentation content by tags"  # Intro text for tags page
tags_extension = [".rst", ".md"]  # File extensions to scan for tags

# Tag styling
tags_badge_colors = {
    "security": "#dc3545",  # Red for security tags
    "performance": "#28a745",  # Green for performance tags
    "ui": "#007bff",  # Blue for UI tags
    "api": "#6f42c1",  # Purple for API tags
    "config": "#fd7e14",  # Orange for configuration tags
    "tutorial": "#20c997",  # Teal for tutorials
    "reference": "#6c757d",  # Gray for reference docs
}

# Sphinx-favicon configuration - Favicon management
favicons = [
    {
        "rel": "icon",
        "sizes": "32x32",
        "href": "favicon-32x32.png",
        "type": "image/png",
    },
    {
        "rel": "icon",
        "sizes": "16x16",
        "href": "favicon-16x16.png",
        "type": "image/png",
    },
    {
        "rel": "apple-touch-icon",
        "sizes": "180x180",
        "href": "apple-touch-icon.png",
        "type": "image/png",
    },
    {
        "rel": "shortcut icon",
        "href": "favicon.ico",
        "type": "image/x-icon",
    },
]

# Sphinx-collections configuration - FIXED to prevent recursive loops
collections = {
    "api_docs": {
        "driver": "copy_folder",  # Use copy_folder instead of symlink
        "source": "autoapi/",
        "target": "_collections/api",
        "active": False,  # Disable until autoapi/ directory is created
        "clean": True,  # Clean before copying to prevent accumulation
    },
}

# Global collection settings to prevent loops
collections_clean = True  # Always clean before build
collections_final_clean = False  # Keep collections after build for inspection

# Sphinx-combine configuration - Combine multiple documents (FIXED PATHS)
combine_source_dir = "."  # Relative to current source directory
combine_build_dir = "../build/combined"  # Relative to current source directory
combine_formats = ["html"]
combine_master_doc = "index"

# Removed reports configuration as extension was removed

# INTENSE FURO THEME CONFIGURATION
html_theme = "furo"

html_theme_options = {
    "sidebar_hide_name": False,
    # Enhanced TOC configuration
    "navigation_depth": 4,  # Show 4 levels of nesting
    "collapse_navigation": False,  # Don't collapse by default
    "sticky_navigation": True,  # Make TOC sticky
    "includehidden": True,  # Include hidden entries
    "titles_only": False,  # Show full document structure
    # Intense branding colors
    "light_css_variables": {
        "color-brand-primary": "#2563eb",  # Blue-600
        "color-brand-content": "#1d4ed8",  # Blue-700
        "color-background-primary": "#ffffff",
        "color-background-secondary": "#f8fafc",  # Slate-50
        "color-background-hover": "#e2e8f0",  # Slate-200
        "color-background-border": "#cbd5e1",  # Slate-300
        "color-code-background": "#1e293b",  # Slate-800
        "color-code-foreground": "#e2e8f0",  # Slate-200
        "color-sidebar-background": "#0f172a",  # Slate-900
        "color-sidebar-foreground": "#cbd5e1",  # Slate-300
        "color-api-background": "#f1f5f9",  # Slate-100
        "color-api-background-hover": "#e2e8f0",  # Slate-200
        "color-admonition-background": "#dbeafe",  # Blue-100
    },
    "dark_css_variables": {
        "color-brand-primary": "#60a5fa",  # Blue-400
        "color-brand-content": "#3b82f6",  # Blue-500
        "color-background-primary": "#0f172a",  # Slate-900
        "color-background-secondary": "#1e293b",  # Slate-800
        "color-background-hover": "#334155",  # Slate-700
        "color-background-border": "#475569",  # Slate-600
        "color-code-background": "#0f172a",  # Slate-900
        "color-code-foreground": "#cbd5e1",  # Slate-300
        "color-sidebar-background": "#020617",  # Slate-950
        "color-sidebar-foreground": "#94a3b8",  # Slate-400
    },
    # Repository integration
    "source_repository": "https://github.com/yourusername/pyautodoc/",
    "source_branch": "main",
    "source_directory": "docs/",
    # Announcements
    "announcement": "🚀 <strong>PyAutoDoc 0.1.0</strong> - Hyper-organized documentation with intense Furo theming!",
    # Footer icons
    "footer_icons": [
        {
            "name": "GitHub",
            "url": "https://github.com/yourusername/pyautodoc/",
            "html": """<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"></path>
            </svg>""",
        },
    ],
}

# Custom CSS and JS files for intense theming
html_css_files = [
    "furo-intense.css",
    "api-docs.css",
    "mermaid-custom.css",
    "toc-enhancements.css",  # New TOC styling
    "tippy-enhancements.css",  # Enhanced tooltips styling
]

html_js_files = [
    "furo-enhancements.js",
    "mermaid-config.js",
    "toc-navigator.js",  # New TOC navigation JS
    "js/api-enhancements.js",  # API page visual fixes
]


# Event Hooks
def autoapi_skip_member(app, what, name, obj, skip, options):
    if name.startswith("__pydantic"):
        return True
    return None


def setup(app: Sphinx):
    app.connect("autoapi-skip-member", autoapi_skip_member)

    # Add custom CSS classes for TOC
    app.add_css_file("toc-enhancements.css")
    app.add_js_file("toc-navigator.js")

    # Manually load sphinx-lastupdate to fix import issue with dashes
    try:
        import importlib

        sphinx_lastupdate = importlib.import_module("sphinx-lastupdate")
        if hasattr(sphinx_lastupdate, "setup"):
            sphinx_lastupdate.setup(app)
            print("🔧 sphinx-lastupdate loaded successfully with importlib!")
        else:
            # Try to find and load the actual module
            lastupdate_module = getattr(sphinx_lastupdate, "lastupdate", None)
            if lastupdate_module and hasattr(lastupdate_module, "setup"):
                lastupdate_module.setup(app)
                print("🔧 sphinx-lastupdate.lastupdate loaded successfully!")
    except Exception as e:
        print(f"⚠️  Could not load sphinx-lastupdate: {e}")

    print("✨ Intense Furo theme with sphinx-design enabled!")
    print("🎨 Custom Mermaid integration configured!")
    print("⚡ Hyper-organized extension system active!")
    print("📚 Enhanced TOC navigation system loaded!")
